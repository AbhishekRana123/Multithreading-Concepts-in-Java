class BookTicket implements Runnable
{
	Object train;
	Object compartment;
	BookTicket(Object train,Object compartment)
	{
		this.train = train;
		this.compartment = compartment;
	}
	
	public void run()
	{
		synchronized(train)
		{
			System.out.println("BookTicket locked on train..");
			try
			{
				Thread.sleep(150);
			}
			catch(Exception e)
			{
			}
			System.out.println("BookTicket now waiting to lock on compartment..");		
			
			synchronized(compartment)
			{
				System.out.println("BookTicket locked on compartment..");
			}
		}
	}
}

class CancelTicket implements Runnable
{
	Object train;
	Object compartment;
	CancelTicket(Object train,Object compartment)
	{
		this.train = train;
		this.compartment = compartment;
	}
	
	public void run()
	{
		synchronized(compartment)
		{
			System.out.println("CancelTicket locked on compartment..");
			try
			{
				Thread.sleep(200);
			}
			catch(Exception e)
			{
			}
			System.out.println("CancelTicket now waiting to lock on train..");		
			
			synchronized(train)
			{
				System.out.println("CancelTicket locked on train..");
			}
		}
	}
}

class DeadLock 
{
	public static void main(String args[])
	{
		Object train = new Object();
		Object compartment = new Object();
		
		BookTicket obj1 = new BookTicket(train,compartment);
		CancelTicket obj2 = new CancelTicket(train,compartment);

		Thread t1 = new Thread(obj1);
		Thread t2 = new Thread(obj2);
		
		t1.start();
		t2.start();
	}	
}

Output -

BookTicket locked on train..
CancelTicket locked on compartment..
BookTicket now waiting to lock on compartment..
CancelTicket now waiting to lock on train..
_
